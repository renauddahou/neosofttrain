pool:
  vmImage: 'ubuntu-latest'

resources:
  containers:
    - container: pythoncontainer
      image: python:3.9  # Utiliser une image Python pour le build et les tests

jobs:
# Job 1: Build et tests dans un conteneur Docker
- job: BuildAndTestInDocker
  displayName: 'Build and Test Python Application in Docker'

  container: pythoncontainer  # Exécuter ce job dans un conteneur Docker

  steps:
    - checkout: self  # Récupérer le code source

    # Étape 1 : Installation des dépendances
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Python Dependencies'

    # Étape 2 : Exécuter les tests et générer un artefact
    - script: |
        pytest --junitxml=test-results.xml
      displayName: 'Run Unit Tests and Generate Test Report'

    # Étape 3 : Sauvegarder les résultats des tests pour les transférer à l'agent par défaut
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: './test-results.xml'  # Chemin vers le fichier généré dans le conteneur
        artifact: 'testResults'           # Nom de l'artefact à publier
        publishLocation: 'pipeline'       # Publie dans le pipeline pour l'étape suivante

